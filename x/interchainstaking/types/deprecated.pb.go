// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quicksilver/interchainstaking/v1/deprecated.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type V1_2_Zone struct {
	ConnectionId                 string                                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChainId                      string                                 `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	DepositAddress               *ICAAccount                            `protobuf:"bytes,3,opt,name=deposit_address,json=depositAddress,proto3" json:"deposit_address,omitempty"`
	WithdrawalAddress            *ICAAccount                            `protobuf:"bytes,4,opt,name=withdrawal_address,json=withdrawalAddress,proto3" json:"withdrawal_address,omitempty"`
	PerformanceAddress           *ICAAccount                            `protobuf:"bytes,5,opt,name=performance_address,json=performanceAddress,proto3" json:"performance_address,omitempty"`
	DelegationAddress            *ICAAccount                            `protobuf:"bytes,6,opt,name=delegation_address,json=delegationAddress,proto3" json:"delegation_address,omitempty"`
	AccountPrefix                string                                 `protobuf:"bytes,7,opt,name=account_prefix,json=accountPrefix,proto3" json:"account_prefix,omitempty"`
	LocalDenom                   string                                 `protobuf:"bytes,8,opt,name=local_denom,json=localDenom,proto3" json:"local_denom,omitempty"`
	BaseDenom                    string                                 `protobuf:"bytes,9,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	RedemptionRate               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=redemption_rate,json=redemptionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"redemption_rate"`
	LastRedemptionRate           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=last_redemption_rate,json=lastRedemptionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_redemption_rate"`
	Validators                   []*Validator                           `protobuf:"bytes,12,rep,name=validators,proto3" json:"validators,omitempty"`
	AggregateIntent              ValidatorIntents                       `protobuf:"bytes,13,rep,name=aggregate_intent,json=aggregateIntent,proto3,castrepeated=ValidatorIntents" json:"aggregate_intent,omitempty"`
	MultiSend                    bool                                   `protobuf:"varint,14,opt,name=multi_send,json=multiSend,proto3" json:"multi_send,omitempty"`
	LiquidityModule              bool                                   `protobuf:"varint,15,opt,name=liquidity_module,json=liquidityModule,proto3" json:"liquidity_module,omitempty"`
	WithdrawalWaitgroup          uint32                                 `protobuf:"varint,16,opt,name=withdrawal_waitgroup,json=withdrawalWaitgroup,proto3" json:"withdrawal_waitgroup,omitempty"`
	IbcNextValidatorsHash        []byte                                 `protobuf:"bytes,17,opt,name=ibc_next_validators_hash,json=ibcNextValidatorsHash,proto3" json:"ibc_next_validators_hash,omitempty"`
	ValidatorSelectionAllocation uint64                                 `protobuf:"varint,18,opt,name=validator_selection_allocation,json=validatorSelectionAllocation,proto3" json:"validator_selection_allocation,omitempty"`
	HoldingsAllocation           uint64                                 `protobuf:"varint,19,opt,name=holdings_allocation,json=holdingsAllocation,proto3" json:"holdings_allocation,omitempty"`
	LastEpochHeight              int64                                  `protobuf:"varint,20,opt,name=last_epoch_height,json=lastEpochHeight,proto3" json:"last_epoch_height,omitempty"`
	Tvl                          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,21,opt,name=tvl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tvl"`
	UnbondingPeriod              int64                                  `protobuf:"varint,22,opt,name=unbonding_period,json=unbondingPeriod,proto3" json:"unbonding_period,omitempty"`
}

func (m *V1_2_Zone) Reset()         { *m = V1_2_Zone{} }
func (m *V1_2_Zone) String() string { return proto.CompactTextString(m) }
func (*V1_2_Zone) ProtoMessage()    {}
func (*V1_2_Zone) Descriptor() ([]byte, []int) {
	return fileDescriptor_7411b8b6e733a507, []int{0}
}
func (m *V1_2_Zone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *V1_2_Zone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_V1_2_Zone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *V1_2_Zone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_V1_2_Zone.Merge(m, src)
}
func (m *V1_2_Zone) XXX_Size() int {
	return m.Size()
}
func (m *V1_2_Zone) XXX_DiscardUnknown() {
	xxx_messageInfo_V1_2_Zone.DiscardUnknown(m)
}

var xxx_messageInfo_V1_2_Zone proto.InternalMessageInfo

func (m *V1_2_Zone) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *V1_2_Zone) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *V1_2_Zone) GetDepositAddress() *ICAAccount {
	if m != nil {
		return m.DepositAddress
	}
	return nil
}

func (m *V1_2_Zone) GetWithdrawalAddress() *ICAAccount {
	if m != nil {
		return m.WithdrawalAddress
	}
	return nil
}

func (m *V1_2_Zone) GetPerformanceAddress() *ICAAccount {
	if m != nil {
		return m.PerformanceAddress
	}
	return nil
}

func (m *V1_2_Zone) GetDelegationAddress() *ICAAccount {
	if m != nil {
		return m.DelegationAddress
	}
	return nil
}

func (m *V1_2_Zone) GetAccountPrefix() string {
	if m != nil {
		return m.AccountPrefix
	}
	return ""
}

func (m *V1_2_Zone) GetLocalDenom() string {
	if m != nil {
		return m.LocalDenom
	}
	return ""
}

func (m *V1_2_Zone) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *V1_2_Zone) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *V1_2_Zone) GetAggregateIntent() ValidatorIntents {
	if m != nil {
		return m.AggregateIntent
	}
	return nil
}

func (m *V1_2_Zone) GetMultiSend() bool {
	if m != nil {
		return m.MultiSend
	}
	return false
}

func (m *V1_2_Zone) GetLiquidityModule() bool {
	if m != nil {
		return m.LiquidityModule
	}
	return false
}

func (m *V1_2_Zone) GetWithdrawalWaitgroup() uint32 {
	if m != nil {
		return m.WithdrawalWaitgroup
	}
	return 0
}

func (m *V1_2_Zone) GetIbcNextValidatorsHash() []byte {
	if m != nil {
		return m.IbcNextValidatorsHash
	}
	return nil
}

func (m *V1_2_Zone) GetValidatorSelectionAllocation() uint64 {
	if m != nil {
		return m.ValidatorSelectionAllocation
	}
	return 0
}

func (m *V1_2_Zone) GetHoldingsAllocation() uint64 {
	if m != nil {
		return m.HoldingsAllocation
	}
	return 0
}

func (m *V1_2_Zone) GetLastEpochHeight() int64 {
	if m != nil {
		return m.LastEpochHeight
	}
	return 0
}

func (m *V1_2_Zone) GetUnbondingPeriod() int64 {
	if m != nil {
		return m.UnbondingPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*V1_2_Zone)(nil), "quicksilver.interchainstaking.v1.v1_2_Zone")
}

func init() {
	proto.RegisterFile("quicksilver/interchainstaking/v1/deprecated.proto", fileDescriptor_7411b8b6e733a507)
}

var fileDescriptor_7411b8b6e733a507 = []byte{
	// 806 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xe4, 0x34,
	0x14, 0x6e, 0xe8, 0xb2, 0xdb, 0xf1, 0xb4, 0x9d, 0xd6, 0x9d, 0x45, 0xd9, 0x15, 0xcc, 0x44, 0x20,
	0xd0, 0xf0, 0xd3, 0x89, 0xa6, 0x5c, 0xc0, 0x05, 0x17, 0xb4, 0x14, 0x69, 0x2b, 0xc4, 0x6a, 0x95,
	0x15, 0x20, 0x15, 0x21, 0xcb, 0xb1, 0x4f, 0x13, 0xab, 0x89, 0x9d, 0x8d, 0x9d, 0x69, 0xfb, 0x12,
	0x88, 0xe7, 0xe0, 0x9a, 0x87, 0xd8, 0xcb, 0x15, 0x57, 0x88, 0x8b, 0x05, 0xb5, 0x2f, 0x82, 0xec,
	0x64, 0x32, 0x61, 0x17, 0xa9, 0xa2, 0xea, 0xd5, 0xd8, 0xdf, 0x77, 0xbe, 0xef, 0x1c, 0xfb, 0x9c,
	0x71, 0xd0, 0xec, 0x59, 0x25, 0xd8, 0xa9, 0x16, 0xd9, 0x1c, 0xca, 0x50, 0x48, 0x03, 0x25, 0x4b,
	0xa9, 0x90, 0xda, 0xd0, 0x53, 0x21, 0x93, 0x70, 0x3e, 0x0b, 0x39, 0x14, 0x25, 0x30, 0x6a, 0x80,
	0x4f, 0x8b, 0x52, 0x19, 0x85, 0x83, 0x8e, 0x64, 0xfa, 0x9a, 0x64, 0x3a, 0x9f, 0x3d, 0x1c, 0x26,
	0x2a, 0x51, 0x2e, 0x38, 0xb4, 0xab, 0x5a, 0xf7, 0xf0, 0x01, 0x53, 0x3a, 0x57, 0x9a, 0xd4, 0x44,
	0xbd, 0x69, 0xa8, 0x51, 0xbd, 0x0b, 0x63, 0xaa, 0x21, 0x9c, 0xcf, 0x62, 0x30, 0x74, 0x16, 0x32,
	0x25, 0x64, 0xc3, 0x8f, 0x13, 0xa5, 0x92, 0x0c, 0x42, 0xb7, 0x8b, 0xab, 0x93, 0xd0, 0x88, 0x1c,
	0xb4, 0xa1, 0x79, 0xd1, 0x04, 0x7c, 0x7e, 0xed, 0x31, 0x5e, 0x2f, 0xd4, 0x29, 0xdf, 0xfd, 0xb9,
	0x8f, 0x7a, 0xf3, 0x19, 0xd9, 0x23, 0xc7, 0x4a, 0x02, 0x7e, 0x0f, 0x6d, 0x30, 0x25, 0x25, 0x30,
	0x23, 0x94, 0x24, 0x82, 0xfb, 0x5e, 0xe0, 0x4d, 0x7a, 0xd1, 0xfa, 0x12, 0x3c, 0xe2, 0xf8, 0x01,
	0x5a, 0x73, 0x46, 0x96, 0x7f, 0xc3, 0xf1, 0xf7, 0xdc, 0xfe, 0x88, 0xe3, 0xef, 0xd0, 0x80, 0x43,
	0xa1, 0xb4, 0x30, 0x84, 0x72, 0x5e, 0x82, 0xd6, 0xfe, 0x6a, 0xe0, 0x4d, 0xfa, 0x7b, 0x9f, 0x4c,
	0xaf, 0xbb, 0xb5, 0xe9, 0xd1, 0x57, 0xfb, 0xfb, 0x8c, 0xa9, 0x4a, 0x9a, 0x68, 0xb3, 0x31, 0xd9,
	0xaf, 0x3d, 0xf0, 0x8f, 0x08, 0x9f, 0x09, 0x93, 0xf2, 0x92, 0x9e, 0xd1, 0xac, 0x75, 0xbe, 0x73,
	0x03, 0xe7, 0xed, 0xa5, 0xcf, 0xc2, 0xfc, 0x27, 0xb4, 0x53, 0x40, 0x79, 0xa2, 0xca, 0x9c, 0x4a,
	0x06, 0xad, 0xfb, 0x9b, 0x37, 0x70, 0xc7, 0x1d, 0xa3, 0x4e, 0xed, 0x1c, 0x32, 0x48, 0xa8, 0xbb,
	0xd2, 0x85, 0xfb, 0xdd, 0x9b, 0xd4, 0xbe, 0xf4, 0x59, 0x98, 0xbf, 0x8f, 0x36, 0x69, 0xcd, 0x92,
	0xa2, 0x84, 0x13, 0x71, 0xee, 0xdf, 0x73, 0x0d, 0xd9, 0x68, 0xd0, 0x27, 0x0e, 0xc4, 0x63, 0xd4,
	0xcf, 0x14, 0xa3, 0x19, 0xe1, 0x20, 0x55, 0xee, 0xaf, 0xb9, 0x18, 0xe4, 0xa0, 0x43, 0x8b, 0xe0,
	0x77, 0x10, 0xb2, 0xb3, 0xd7, 0xf0, 0x3d, 0xc7, 0xf7, 0x2c, 0x52, 0xd3, 0x80, 0x06, 0x25, 0x70,
	0xc8, 0x0b, 0x77, 0x86, 0x92, 0x1a, 0xf0, 0x91, 0x8d, 0x39, 0xf8, 0xe2, 0xf9, 0xcb, 0xf1, 0xca,
	0x9f, 0x2f, 0xc7, 0x1f, 0x24, 0xc2, 0xa4, 0x55, 0x3c, 0x65, 0x2a, 0x6f, 0x26, 0xbb, 0xf9, 0xd9,
	0xd5, 0xfc, 0x34, 0x34, 0x17, 0x05, 0xe8, 0xe9, 0x21, 0xb0, 0xdf, 0x7f, 0xdb, 0x45, 0xcd, 0xe0,
	0x1f, 0x02, 0x8b, 0x36, 0x97, 0xa6, 0x11, 0x35, 0x80, 0x25, 0x1a, 0x66, 0x54, 0x1b, 0xf2, 0x6a,
	0xae, 0xfe, 0x2d, 0xe4, 0xc2, 0xd6, 0x39, 0xfa, 0x77, 0xbe, 0x6f, 0x10, 0x9a, 0xd3, 0x4c, 0x70,
	0x6a, 0x54, 0xa9, 0xfd, 0xf5, 0x60, 0x75, 0xd2, 0xdf, 0xfb, 0xf8, 0xfa, 0x96, 0x7c, 0xbf, 0xd0,
	0x44, 0x1d, 0x39, 0x2e, 0xd1, 0x16, 0x4d, 0x92, 0xd2, 0x36, 0x08, 0x88, 0xd5, 0x49, 0xe3, 0x6f,
	0x38, 0xcb, 0xd9, 0xff, 0xb0, 0x3c, 0x72, 0xc2, 0x83, 0xe1, 0xaf, 0x7f, 0x8d, 0xb7, 0x5e, 0x01,
	0x75, 0x34, 0x68, 0x13, 0xd4, 0x88, 0x6d, 0x5b, 0x5e, 0x65, 0x46, 0x10, 0x0d, 0x92, 0xfb, 0x9b,
	0x81, 0x37, 0x59, 0x8b, 0x7a, 0x0e, 0x79, 0x0a, 0x92, 0xe3, 0x0f, 0xd1, 0x56, 0x26, 0x9e, 0x55,
	0x82, 0x0b, 0x73, 0x41, 0x72, 0xc5, 0xab, 0x0c, 0xfc, 0x81, 0x0b, 0x1a, 0xb4, 0xf8, 0xb7, 0x0e,
	0xc6, 0x33, 0x34, 0xec, 0xfc, 0xc3, 0xce, 0xa8, 0x30, 0x49, 0xa9, 0xaa, 0xc2, 0xdf, 0x0a, 0xbc,
	0xc9, 0x46, 0xb4, 0xb3, 0xe4, 0x7e, 0x58, 0x50, 0xf8, 0x33, 0xe4, 0x8b, 0x98, 0x11, 0x09, 0xe7,
	0x86, 0x2c, 0xef, 0x81, 0xa4, 0x54, 0xa7, 0xfe, 0x76, 0xe0, 0x4d, 0xd6, 0xa3, 0xfb, 0x22, 0x66,
	0x8f, 0xe1, 0xdc, 0xb4, 0x07, 0xd1, 0x8f, 0xa8, 0x4e, 0xf1, 0x21, 0x1a, 0xb5, 0xf1, 0x44, 0x43,
	0xd6, 0xbc, 0x36, 0x34, 0xb3, 0x03, 0x69, 0x97, 0x3e, 0x0e, 0xbc, 0xc9, 0x9d, 0xe8, 0xed, 0x36,
	0xea, 0xe9, 0x22, 0x68, 0xbf, 0x8d, 0xc1, 0x21, 0xda, 0x49, 0x55, 0xc6, 0x85, 0x4c, 0x74, 0x57,
	0xba, 0xe3, 0xa4, 0x78, 0x41, 0x75, 0x04, 0x1f, 0xa1, 0x6d, 0x37, 0x5d, 0x50, 0x28, 0x96, 0x92,
	0x14, 0x44, 0x92, 0x1a, 0x7f, 0x18, 0x78, 0x93, 0xd5, 0x68, 0x60, 0x89, 0xaf, 0x2d, 0xfe, 0xc8,
	0xc1, 0xf8, 0x31, 0x5a, 0x35, 0xf3, 0xcc, 0xbf, 0x7f, 0x0b, 0x83, 0x67, 0x8d, 0x6c, 0x27, 0x2a,
	0x19, 0x2b, 0x69, 0x6b, 0x22, 0x05, 0x94, 0x42, 0x71, 0xff, 0xad, 0x3a, 0x75, 0x8b, 0x3f, 0x71,
	0xf0, 0xc1, 0xf1, 0xf3, 0xcb, 0x91, 0xf7, 0xe2, 0x72, 0xe4, 0xfd, 0x7d, 0x39, 0xf2, 0x7e, 0xb9,
	0x1a, 0xad, 0xbc, 0xb8, 0x1a, 0xad, 0xfc, 0x71, 0x35, 0x5a, 0x39, 0xfe, 0xb2, 0x93, 0x5f, 0xc8,
	0x04, 0x64, 0x25, 0xcc, 0xc5, 0x6e, 0x5c, 0x89, 0x8c, 0x87, 0xdd, 0xf7, 0xff, 0xfc, 0x3f, 0xbe,
	0x00, 0xae, 0xba, 0xf8, 0xae, 0x7b, 0xf3, 0x3f, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x32, 0xa7,
	0xb5, 0x47, 0xf6, 0x06, 0x00, 0x00,
}

func (m *V1_2_Zone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *V1_2_Zone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *V1_2_Zone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingPeriod != 0 {
		i = encodeVarintDeprecated(dAtA, i, uint64(m.UnbondingPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	{
		size := m.Tvl.Size()
		i -= size
		if _, err := m.Tvl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeprecated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.LastEpochHeight != 0 {
		i = encodeVarintDeprecated(dAtA, i, uint64(m.LastEpochHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.HoldingsAllocation != 0 {
		i = encodeVarintDeprecated(dAtA, i, uint64(m.HoldingsAllocation))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ValidatorSelectionAllocation != 0 {
		i = encodeVarintDeprecated(dAtA, i, uint64(m.ValidatorSelectionAllocation))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.IbcNextValidatorsHash) > 0 {
		i -= len(m.IbcNextValidatorsHash)
		copy(dAtA[i:], m.IbcNextValidatorsHash)
		i = encodeVarintDeprecated(dAtA, i, uint64(len(m.IbcNextValidatorsHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.WithdrawalWaitgroup != 0 {
		i = encodeVarintDeprecated(dAtA, i, uint64(m.WithdrawalWaitgroup))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.LiquidityModule {
		i--
		if m.LiquidityModule {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.MultiSend {
		i--
		if m.MultiSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.AggregateIntent) > 0 {
		for iNdEx := len(m.AggregateIntent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregateIntent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDeprecated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDeprecated(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	{
		size := m.LastRedemptionRate.Size()
		i -= size
		if _, err := m.LastRedemptionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeprecated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.RedemptionRate.Size()
		i -= size
		if _, err := m.RedemptionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeprecated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintDeprecated(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LocalDenom) > 0 {
		i -= len(m.LocalDenom)
		copy(dAtA[i:], m.LocalDenom)
		i = encodeVarintDeprecated(dAtA, i, uint64(len(m.LocalDenom)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AccountPrefix) > 0 {
		i -= len(m.AccountPrefix)
		copy(dAtA[i:], m.AccountPrefix)
		i = encodeVarintDeprecated(dAtA, i, uint64(len(m.AccountPrefix)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DelegationAddress != nil {
		{
			size, err := m.DelegationAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeprecated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PerformanceAddress != nil {
		{
			size, err := m.PerformanceAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeprecated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WithdrawalAddress != nil {
		{
			size, err := m.WithdrawalAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeprecated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DepositAddress != nil {
		{
			size, err := m.DepositAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDeprecated(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintDeprecated(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintDeprecated(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeprecated(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeprecated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *V1_2_Zone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovDeprecated(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovDeprecated(uint64(l))
	}
	if m.DepositAddress != nil {
		l = m.DepositAddress.Size()
		n += 1 + l + sovDeprecated(uint64(l))
	}
	if m.WithdrawalAddress != nil {
		l = m.WithdrawalAddress.Size()
		n += 1 + l + sovDeprecated(uint64(l))
	}
	if m.PerformanceAddress != nil {
		l = m.PerformanceAddress.Size()
		n += 1 + l + sovDeprecated(uint64(l))
	}
	if m.DelegationAddress != nil {
		l = m.DelegationAddress.Size()
		n += 1 + l + sovDeprecated(uint64(l))
	}
	l = len(m.AccountPrefix)
	if l > 0 {
		n += 1 + l + sovDeprecated(uint64(l))
	}
	l = len(m.LocalDenom)
	if l > 0 {
		n += 1 + l + sovDeprecated(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovDeprecated(uint64(l))
	}
	l = m.RedemptionRate.Size()
	n += 1 + l + sovDeprecated(uint64(l))
	l = m.LastRedemptionRate.Size()
	n += 1 + l + sovDeprecated(uint64(l))
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovDeprecated(uint64(l))
		}
	}
	if len(m.AggregateIntent) > 0 {
		for _, e := range m.AggregateIntent {
			l = e.Size()
			n += 1 + l + sovDeprecated(uint64(l))
		}
	}
	if m.MultiSend {
		n += 2
	}
	if m.LiquidityModule {
		n += 2
	}
	if m.WithdrawalWaitgroup != 0 {
		n += 2 + sovDeprecated(uint64(m.WithdrawalWaitgroup))
	}
	l = len(m.IbcNextValidatorsHash)
	if l > 0 {
		n += 2 + l + sovDeprecated(uint64(l))
	}
	if m.ValidatorSelectionAllocation != 0 {
		n += 2 + sovDeprecated(uint64(m.ValidatorSelectionAllocation))
	}
	if m.HoldingsAllocation != 0 {
		n += 2 + sovDeprecated(uint64(m.HoldingsAllocation))
	}
	if m.LastEpochHeight != 0 {
		n += 2 + sovDeprecated(uint64(m.LastEpochHeight))
	}
	l = m.Tvl.Size()
	n += 2 + l + sovDeprecated(uint64(l))
	if m.UnbondingPeriod != 0 {
		n += 2 + sovDeprecated(uint64(m.UnbondingPeriod))
	}
	return n
}

func sovDeprecated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeprecated(x uint64) (n int) {
	return sovDeprecated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *V1_2_Zone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeprecated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: v1_2_Zone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: v1_2_Zone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositAddress == nil {
				m.DepositAddress = &ICAAccount{}
			}
			if err := m.DepositAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithdrawalAddress == nil {
				m.WithdrawalAddress = &ICAAccount{}
			}
			if err := m.WithdrawalAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceAddress == nil {
				m.PerformanceAddress = &ICAAccount{}
			}
			if err := m.PerformanceAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationAddress == nil {
				m.DelegationAddress = &ICAAccount{}
			}
			if err := m.DelegationAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedemptionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRedemptionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastRedemptionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateIntent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateIntent = append(m.AggregateIntent, &ValidatorIntent{})
			if err := m.AggregateIntent[len(m.AggregateIntent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultiSend = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityModule", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiquidityModule = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalWaitgroup", wireType)
			}
			m.WithdrawalWaitgroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalWaitgroup |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcNextValidatorsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcNextValidatorsHash = append(m.IbcNextValidatorsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.IbcNextValidatorsHash == nil {
				m.IbcNextValidatorsHash = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSelectionAllocation", wireType)
			}
			m.ValidatorSelectionAllocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSelectionAllocation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldingsAllocation", wireType)
			}
			m.HoldingsAllocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldingsAllocation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEpochHeight", wireType)
			}
			m.LastEpochHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEpochHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tvl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tvl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			m.UnbondingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeprecated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeprecated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeprecated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeprecated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeprecated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeprecated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeprecated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeprecated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeprecated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeprecated = fmt.Errorf("proto: unexpected end of group")
)
