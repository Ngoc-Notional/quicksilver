syntax = "proto3";
package quicksilver.interchainstaking.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "quicksilver/interchainstaking/v1/proposals.proto";
import "quicksilver/interchainstaking/v1/params.proto";

option go_package = "github.com/ingenuity-build/quicksilver/x/interchainstaking/types";

// Msg defines the interchainstaking Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // RequestRedemption defines a method for requesting burning of qAssets for
  // native assets.
  rpc RequestRedemption(MsgRequestRedemption)
      returns (MsgRequestRedemptionResponse) {
    option (google.api.http) = {
      post : "/quicksilver/tx/v1/interchainstaking/redeem"
      body : "*"
    };
  }
  // SignalIntent defines a method for signalling voting intent for one or more
  // validators.
  rpc SignalIntent(MsgSignalIntent) returns (MsgSignalIntentResponse) {
    option (google.api.http) = {
      post : "/quicksilver/tx/v1/interchainstaking/intent"
      body : "*"
    };
  }

  rpc RegisterZone(MsgRegisterZone) returns (MsgRegisterZoneResponse) {
    option (google.api.http) = {
      post : "/quicksilver/tx/v1/interchainstaking/register_zone"
      body : "*"
    };
  }

  rpc UpdateZone(MsgUpdateZone) returns (MsgUpdateZoneResponse) {
    option (google.api.http) = {
      post : "/quicksilver/tx/v1/interchainstaking/update_zone"
      body : "*"
    };
  }

  rpc GovCloseChannel(MsgGovCloseChannel) returns (MsgGovCloseChannelResponse) {
    option (google.api.http) = {
      post : "/quicksilver/tx/v1/interchainstaking/close_channel"
      body : "*"
    };
  }

  rpc GovReopenChannel(MsgGovReopenChannel)
      returns (MsgGovReopenChannelResponse) {
    option (google.api.http) = {
      post : "/quicksilver/tx/v1/interchainstaking/reopen_channel"
      body : "*"
    };
  }

  // Update the params of the module through gov v1 type.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse) {
    option (google.api.http) = {
      post : "/quicksilver/tx/v1/interchainstaking/update_params"
      body : "*"
    };
  }
}


// MsgRequestRedemption represents a message type to request a burn of qAssets
// for native assets.
message MsgRequestRedemption {
  option (cosmos.msg.v1.signer) = "from_address";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  cosmos.base.v1beta1.Coin value = 1
      [ (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"coin\"" ];
  string destination_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string from_address = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgSignalIntent represents a message type for signalling voting intent for
// one or more validators.
message MsgSignalIntent {
  option (cosmos.msg.v1.signer) = "from_address";
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  string intents = 2 [ (gogoproto.moretags) = "yaml:\"intents\"" ];
  string from_address = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgRequestRedemptionResponse defines the MsgRequestRedemption response type.
message MsgRequestRedemptionResponse {}

// MsgSignalIntentResponse defines the MsgSignalIntent response type.
message MsgSignalIntentResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov
  // unless overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/interchainstaking parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}
